# 这是基于最新的cargo-deny格式的配置文件
[graph]
# 如果指定了1个或多个目标三元组（也可以选择性地指定target_features），
# 那么在运行`cargo deny check`时，只会检查指定的目标。
targets = [
  # 三元组可以是任何字符串，但只有在rustc中内置的目标三元组（截至1.40）
  # 可以针对实际的配置表达式进行检查
  #{ triple = "x86_64-unknown-linux-musl" },
  # 您还可以指定您承诺为特定目标启用的target_features。
  # 目前，target_features不会针对目标架构支持的实际有效特性进行验证。
  #{ triple = "wasm32-unknown-unknown", features = ["atomics"] },
]

# 在运行`cargo deny check advisories`时会考虑此部分
[advisories]
# advisory数据库被克隆/获取到的根目录路径
db-path = "~/.cargo/advisory-db"
# 要使用的advisory数据库的URL
db-urls = ["https://github.com/rustsec/advisory-db"]
# 使用git CLI获取advisory数据库
git-fetch-with-cli = true
# 配置如何处理未维护的crate
unmaintained = "workspace"
# 配置如何处理已从源注册表yanked的crate
yanked = "deny"
# 忽略的advisory ID列表
ignore = [
  #"RUSTSEC-0000-0000",
]

# 在运行`cargo deny check licenses`时会考虑此部分
[licenses]
# 明确允许的许可证
allow = [
  "MIT",
  "Apache-2.0",
  "Unicode-DFS-2016",
  "MPL-2.0",
  "BSD-2-Clause",
  "BSD-3-Clause",
  "ISC",
  "CC0-1.0",
]
# 从许可证文本中检测许可证的置信度阈值。
# 值越高，许可证文本必须越接近有效SPDX许可证文件的规范许可证文本。
confidence-threshold = 0.8
# 在每个crate基础上允许一个或多个许可证，
# 这样特定许可证不会像正常允许列表那样被接受用于每个可能的crate
exceptions = [
  # 每个条目都是crate和版本约束，以及其特定的允许列表
  #{ allow = ["Zlib"], name = "adler32", version = "*" },
]

# 某些crate没有（容易）机器可读的许可证信息，
# 为其添加澄清条目允许您手动指定许可证信息
#[[licenses.clarify]]
# 澄清适用的crate的名称
#name = "ring"
# crate的可选版本约束
#version = "*"
# crate的许可证要求的SPDX表达式
#expression = "MIT AND ISC AND OpenSSL"
# crate源中用作许可证表达式"真实来源"的一个或多个文件。
# 如果内容匹配，在运行许可证检查时将使用澄清，否则澄清将被忽略，
# 并且将正常检查crate，这可能会根据您的其余配置产生警告或错误
#license-files = [
# 每个条目都是crate相对路径和其内容的（不透明）哈希
#{ path = "LICENSE", hash = 0xbd0eed23 }
#]

[licenses.private]
# 如果为true，则忽略未发布或只发布到私有注册表的工作区crate
ignore = true
# 您可能要发布crate的一个或多个私有注册表，
# 如果一个crate只发布到私有注册表，且ignore为true，
# 则该crate的许可证不会被检查
registries = [
  #"https://sekretz.com/registry
]

# 在运行`cargo deny check bans`时会考虑此部分
[bans]
# 当检测到同一crate的多个版本时的lint级别
multiple-versions = "warn"
# 当crate版本要求为`*`时的lint级别
wildcards = "allow"
# 当为具有多个版本的crate创建dotgraph时使用的图突出显示
# * lowest-version - 突出显示到最低版本重复项的路径
# * simplest-path - 突出显示到边最少的版本的路径
# * all - 同时使用lowest-version和simplest-path
highlight = "all"
# 允许的crate列表。小心使用！
allow = [
  #{ name = "ansi_term", version = "=0.11.0" },
]
# 要拒绝的crate列表 - 已经移除，不再使用
# deny = [
#   # 每个条目都是crate的名称和版本范围。如果没有指定版本，
#   # 将匹配所有版本。
#   #{ name = "ansi_term", version = "=0.11.0" },
#   #
#   # 可以选择性地指定包装器crate，以允许crate当它是
#   # 被禁止的crate的直接依赖时使用
#   #{ name = "ansi_term", version = "=0.11.0", wrappers = [] },
# ]
# 在进行重复检测时将跳过的特定crate/版本
skip = [
  #{ name = "ansi_term", version = "=0.11.0" },
]
# 类似于`skip`，允许您在重复检测期间跳过某些crate。
# 与skip不同，它还包括从指定crate开始的传递依赖项的整个树，
# 直到某个深度，默认为无限
skip-tree = [
  #{ name = "ansi_term", version = "=0.11.0", depth = 20 },
]

# 在运行`cargo deny check sources`时会考虑此部分
[sources]
# 当遇到不在允许列表中的crate注册表时的lint级别
unknown-registry = "warn"
# 当遇到不在允许列表中的git仓库时的lint级别
unknown-git = "warn"
# 允许的crate注册表URL列表。如果未指定，默认为crates.io索引。
# 如果指定但为空，则不允许任何注册表。
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# 允许的Git仓库URL列表
allow-git = []

[sources.allow-org]
# 允许git源的github.com组织
github = []
# 允许git源的gitlab.com组织
gitlab = []
# 允许git源的bitbucket.org组织
bitbucket = [] 